apiVersion: thousandeyes.devnet.cisco.com/v1alpha1
kind: WebTransactionTest
metadata:
  # specify the unique test name
  name: webtransaction-devnet-homepage
# specify the basic settings for the web transactions test
spec:
  # (required) target url for the test
  url: https://developer.cisco.com/
  # (required) frequency of ThousandEyes Cloud Agents running the test.
  # Acceptable Values: [300, 600, 900, 1800, 3600] value in seconds
  interval: 1800
  #(required) array of cloud agent names
  agents:
    - agentName: Tokyo, Japan (Trial)
    - agentName: Singapore (Trial) - IPv6
  #(optional) array of alert rules. If this field is not specified, The default alert rules will be used.
  alertRules:
    - ruleName: Default Web Transaction 2.0 Alert Rule
  #(required) a transaction script which could be generated by ThousandEyes Recorder.
  transactionScript: |
    import { By, Key } from 'selenium-webdriver';
    import { driver, test } from 'thousandeyes';

    runScript();

    async function runScript() {

        await configureDriver();

        const settings = test.getSettings();

        // Load page
        await driver.get(settings.url);

        await click(By.id(`offer-getstarted`));

    }

    async function configureDriver() {
        await driver.manage().setTimeouts({
            implicit: 7 * 1000, // If an element is not found, reattempt for this many milliseconds
        });
    }

    async function click(selector) {
        await simulateHumanDelay();

        const configuredTimeouts = await driver.manage().getTimeouts();
        const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;

        await reattemptUntil(attemptToClick, clickAttemptEndTime);

        async function attemptToClick() {
            await driver.findElement(selector)
                        .click();
        }
    }

    async function reattemptUntil(attemptActionFn, attemptEndTime) {
        const TIME_BETWEEN_ATTEMPTS = 100;
        let numberOfAttempts = 0;
        let attemptError;
        while (Date.now() < attemptEndTime || numberOfAttempts === 0) {
            try {
                numberOfAttempts += 1;
                await attemptActionFn();
            }
            catch (error) {
                attemptError = error;
                await driver.sleep(TIME_BETWEEN_ATTEMPTS);
                continue; // Attempt failed, reattempt
            }
            attemptError = null;
            break; // Attempt succeeded, stop attempting
        }

        const wasAttemptSuccessful = !attemptError;
        if (!wasAttemptSuccessful) {
            throw attemptError;
        }
    }

    async function simulateHumanDelay() {
        await driver.sleep(5500);
    }

