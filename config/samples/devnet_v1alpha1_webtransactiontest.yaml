apiVersion: thousandeyes.devnet.cisco.com/v1alpha1
kind: WebTransactionTest
metadata:
  name: webtransaction-sample
spec:
  webTransaction:
    url: https://app.thousandeyes.com/login
    interval: 300
    agents:
      - agentId: 4492
      - agentId: 4495
    transactionScript: |
      import { By, Key } from 'selenium-webdriver';
      import { driver, test, credentials } from 'thousandeyes';

      runScript();

      async function runScript() {

          await configureDriver();

          const settings = test.getSettings();

          // Load page
          await driver.get(settings.url);

          await typeText('xiltong@cisco.com', By.id(`email`));

          await click(By.id(`password`));

          await typeText(credentials.get('thousandeyes_pwd'), By.id(`password`));

          // Click on 'Log In'
      	  await click(By.id(`submit-button`));

          await driver.takeScreenshot();
      }

      async function configureDriver() {
          await driver.manage().setTimeouts({
              implicit: 7 * 1000, // If an element is not found, reattempt for this many milliseconds
          });
      }

      async function typeText(value, selector) {
          await simulateHumanDelay();
          const element = await driver.findElement(selector);
          await element.clear();
          await element.sendKeys(value);
      }

      async function simulateHumanDelay() {
          await driver.sleep(550);
      }

      async function click(selector) {
          await simulateHumanDelay();

          const configuredTimeouts = await driver.manage().getTimeouts();
          const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;

          await reattemptUntil(attemptToClick, clickAttemptEndTime);

          async function attemptToClick() {
              await driver.findElement(selector)
                          .click();
          }
      }

      async function reattemptUntil(attemptActionFn, attemptEndTime) {
          const TIME_BETWEEN_ATTEMPTS = 100;
          let numberOfAttempts = 0;
          let attemptError;
          while (Date.now() < attemptEndTime || numberOfAttempts === 0) {
              try {
                  numberOfAttempts += 1;
                  await attemptActionFn();
              }
              catch (error) {
                  attemptError = error;
                  await driver.sleep(TIME_BETWEEN_ATTEMPTS);
                  continue; // Attempt failed, reattempt
              }
              attemptError = null;
              break; // Attempt succeeded, stop attempting
          }

          const wasAttemptSuccessful = !attemptError;
          if (!wasAttemptSuccessful) {
              throw attemptError;
          }
      }

